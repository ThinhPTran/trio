#+SETUPFILE: "setup.org"
#+TITLE: thi.ng/trio

* About the project

** TODO Overview

This project provides a simple, yet extensible and datatype agnostic
[[http://en.wikipedia.org/wiki/Triplestore][triple store]] API & [[http://en.wikipedia.org/wiki/SPARQL][SPARQL]]-like query engine for Clojure/ClojureScript.
Triple stores are usually associated with [[http://en.wikipedia.org/wiki/Semantic_web][Semantic Web]] & [[http://en.wikipedia.org/wiki/Linked_Data][Linked Data]]
applications, however encoding graphs as triples (or quads) is natural
too for a large number of other use cases and this library is aiming
to address these.

** Status

ALPHA quality, subject to frequent changes until further notice.

** Example usage

#+BEGIN_SRC clojure
  (require
   '[thi.ng.trio.core :refer :all]
   '[thi.ng.trio.query :as q])
#+END_SRC

[[../assets/counselor.png]]

#+BEGIN_SRC clojure
  ;; ds will hold a plain triple store which accepts any datatype
  ;; for its subjects, predicates & objects

  ;; this API layer does NOT impose any RDF semantics or similar...
  ;; these will be dealt with in the still unreleased thi.ng/sema library

  (def ds
    (add-many
     (plain-store)
     '[[reiner       loves     malkina]
       [laura        loves     counselor]
       [counselor    loves     laura]
       [westray      friend-of reiner]
       [westray      killed-by wireman2]
       [counselor    friend-of reiner]
       [reiner       killed-by cartel]
       [wireman      works-for malkina]
       [wireman2      works-for malkina]
       [green-hornet killed-by wireman]
       [green-hornet works-for jefe]
       [jefe         works-for cartel]
       [laura        killed-by cartel]
       [wireman      killed-by cartel]]))

  ;; all subjects
  (subjects ds)
  ;; (jefe green-hornet wireman2 wireman counselor westray laura reiner)

  ;; all relations
  (predicates ds)
  ;; (works-for killed-by friend-of loves)

  ;; show all triples...
  (select ds)
  ;; ([jefe works-for cartel]
  ;;  [green-hornet works-for jefe]
  ;;  [green-hornet killed-by wireman]
  ;;  [wireman2 works-for malkina]
  ;;  [wireman killed-by cartel]
  ;;  [wireman works-for malkina]
  ;;  [counselor friend-of reiner]
  ;;  [westray killed-by wireman2]
  ;;  [westray friend-of reiner]
  ;;  [councelor loves laura]
  ;;  [laura killed-by cartel]
  ;;  [laura loves counselor]
  ;;  [reiner killed-by cartel]
  ;;  [reiner loves malkina])


  ;; all characters in love
  (select ds nil 'loves nil)
  ;; ([councelor loves laura] [laura loves counselor] [reiner loves malkina])


  ;; all we know about malkina as object
  (select ds nil nil 'malkina)
  ;; ([wireman2 works-for malkina] [wireman works-for malkina] [reiner loves malkina])


  ;; all cartel victims
  (select ds nil 'killed-by 'cartel)
  ;; ([laura killed-by cartel] [reiner killed-by cartel] [wireman killed-by cartel])


  ;; now let's use query engine & bind some query variable(s)
  (q/select-with-bindings ds '[?victim killed-by cartel] nil false)
  ;; ({?victim laura} {?victim reiner} {?victim wireman})


  ;; ...not just cartel victims & also include matched triples in result
  (q/select-with-bindings ds '[?victim killed-by ?criminal])
  ;; ({?criminal wireman,
  ;;   ?victim green-hornet,
  ;;   :__triples [[green-hornet killed-by wireman]]}
  ;;  {?criminal cartel,
  ;;   ?victim laura,
  ;;   :__triples [[laura killed-by cartel]]}
  ;;  {?criminal cartel,
  ;;   ?victim reiner,
  ;;   :__triples [[reiner killed-by cartel]]}
  ;;  {?criminal cartel,
  ;;   ?victim wireman,
  ;;   :__triples [[wireman killed-by cartel]]}
  ;;  {?criminal wireman2,
  ;;   ?victim westray,
  ;;   :__triples [[westray killed-by wireman2]]})


  ;; is malkina a murderer?
  (q/select-with-bindings ds '[?v killed-by malkina])
  ;; nil


  ;; ...doesn't look like it, but maybe she employed someone to do dirty
  ;; work for her?
  (q/select-join-from ds '[[?v killed-by ?m] [?m works-for malkina]])
  ;; ({?v westray, ?m wireman2} {?v green-hornet, ?m wireman})


  ;; ...bingo, we could also have written this as a property path query
  (q/select-join-from ds (q/resolve-patterns '[[?v [killed-by works-for] ?m]]))
  ;; ({?m malkina, ?v green-hornet, ?___q9910 wireman}
  ;;  {?m malkina, ?v westray, ?___q9910 wireman2})


  ;; let's also see who's the lover of the criminal, check if he/she died too
  ;; and if victim & lover had any link to each other?
  (->> '[[?victim [killed-by works-for] ?m]
         [?lover loves ?m]
         [?lover killed-by ?m2]
         [?victim ?rel ?lover]]
       (q/resolve-patterns)
       (q/select-join-from ds)
       (map #(select-keys % '[?victim ?lover ?rel ?m])))
  ;; ({?m malkina, ?rel friend-of, ?lover reiner, ?victim westray})
#+END_SRC

** License

This project is open source and licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache Software License 2.0]].

** Injected properties                                             :noexport:

#+BEGIN_SRC clojure :exports none :noweb-ref version
0.1.0-SNAPSHOT
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref project-url
http://thi.ng/trio
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref gen-source-path
target/classes
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref gen-test-path
target/test-classes
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/trio-<<version>>.js
#+END_SRC

** Dependencies
*** Runtime
**** [[https://github.com/clojure/clojure][Clojure]]
#+BEGIN_SRC clojure :noweb-ref dep-clj
[org.clojure/clojure "1.6.0"]
#+END_SRC
**** [[https://github.com/clojure/clojurescript][ClojureScript]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs
[org.clojure/clojurescript "0.0-2197"]
#+END_SRC
**** [[https://github.com/thi-ng/common/][thi.ng/common]]
#+BEGIN_SRC clojure :noweb-ref dep-common
[thi.ng/common "0.2.0-SNAPSHOT"]
#+END_SRC
*** Development
**** [[https://github.com/cemerick/austin][Austin]]
#+BEGIN_SRC clojure :noweb-ref dep-austin
[com.cemerick/austin "0.1.4"]
#+END_SRC
**** [[https://github.com/lynaghk/cljx][Cljx]]
#+BEGIN_SRC clojure :noweb-ref dep-cljx
[com.keminglabs/cljx "0.3.2"]
#+END_SRC
**** [[https://github.com/hugoduncan/criterium][Criterium]]
#+BEGIN_SRC clojure :noweb-ref dep-criterium
[criterium "0.4.1"]
#+END_SRC
**** [[https://github.com/cemerick/clojurescript.test][clojurescript.test]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs-test
[com.cemerick/clojurescript.test "0.2.2"]
#+END_SRC
**** [[https://github.com/emezeske/lein-cljsbuild][Cljsbuild]]
#+BEGIN_SRC clojure :noweb-ref dep-cljsbuild
[lein-cljsbuild "1.0.3"]
#+END_SRC

** Contributors

| *Name*          | *Role*                          | *Website*                  |
|-----------------+---------------------------------+----------------------------|
| [[k@thi.ng][Karsten Schmidt]] | initiator & principal developer | http://postspectacular.com |

** Release history

| *Version* | *Released* | *Description*      | *Lein coordinates*      | *Tagged Github URL* |
|-----------+------------+--------------------+-------------------------+---------------------|
|     0.1.0 | pending    | 1st public release | =[thi.ng/trio "0.1.0"]= |                     |

** Leiningen coordinates

#+BEGIN_SRC clojure :noweb yes :noweb-ref lein-coords
  [thi.ng/trio <<version>>]
#+END_SRC

** Building this project

This project is written in a literate programming format and requires
[[https://www.gnu.org/software/emacs/][Emacs]] & [[http://orgmode.org][Org-mode]] to generate usable source code in [[https://github.com/lynaghk/cljx][CLJX]] form. Assuming
both tools are installed, the easiest way to generate a working
project is via command line (make sure =emacs= is on your path or else
edit its path in =tangle.sh=):

#+BEGIN_SRC bash
  git clone https://github.com/thi.ng/trio.git
  cd trio
  ./tangle.sh src/*.org test/*.org
#+END_SRC

Tangling is the process of extracting & combining source blocks from
=.org= files into an actual working project/source tree. Once tangling
is complete, you can =cd= into the generated project directory
(=babel=) and then use =lein= as usual.

*** Testing

The =project.clj= file defines an alias to trigger a complete build &
tests for both CLJ & CLJS versions.

#+BEGIN_SRC bash
  cd babel
  lein cleantest
#+END_SRC

To build the Clojurescript version simply run =lein cljsbuild test=
from the same directory. A small HTML harness for the resulting JS
file is also located in that folder (=babel/index.html=), allowing for
further experimentation in the browser.

*** Working with the REPL

Since the generated =project.clj= (see below) includes REPL hooks for
CLJX, editing files in Org-mode, then re-loading & testing changes is
quite trivial. Simply launch a REPL (via =lein= or Emacs) as usual.
Everytime you've made changes to an =.org= file, re-tangle it from
Emacs (=C-c C-v t=) or =tangle.sh=, then reload the namespace in the
REPL via =(require 'thi.ng.trio... :reload)= or similar.

** Leiningen project file                                          :noexport:

#+BEGIN_SRC clojure :tangle ../babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject thi.ng/trio "<<version>>"
    :description "Generic triple store"
    :url "<<project-url>>"
    :license {:name "Apache Software License 2.0"
              :url "http://www.apache.org/licenses/LICENSE-2.0"}
    :dependencies [<<dep-clj>>
                   <<dep-common>>]

    :source-paths ["src/cljx"]
    :test-paths ["<<gen-test-path>>"]

    :profiles {:dev {:dependencies [<<dep-cljs>>
                                    <<dep-criterium>>]
                     :plugins [<<dep-cljx>>
                               <<dep-cljsbuild>>
                               <<dep-cljs-test>>
                               <<dep-austin>>]
                     :hooks [cljx.hooks]
                     :aliases {"cleantest" ["do" "clean," "test," "cljsbuild" "test"]}}}

    :cljx {:builds [{:source-paths ["src/cljx"]
                     :output-path "<<gen-source-path>>"
                     :rules :clj}
                    {:source-paths ["src/cljx"]
                     :output-path "<<gen-source-path>>"
                     :rules :cljs}
                    {:source-paths ["test/cljx"]
                     :output-path "<<gen-test-path>>"
                     :rules :clj}
                    {:source-paths ["test/cljx"]
                     :output-path "<<gen-test-path>>"
                     :rules :cljs}]}

    :cljsbuild {:builds [{:source-paths ["<<gen-source-path>>" "<<gen-test-path>>"]
                          :id "simple"
                          :compiler {:output-to "<<cljs-artefact-path>>"
                                     :optimizations :whitespace
                                     :pretty-print true}}]
                :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "http://postspectacular.com"]
                                [:timezone "0"]]])
#+END_SRC

** ClojureScript HTML harness                                      :noexport:

#+BEGIN_SRC html :tangle ../babel/index.html :noweb yes :mkdirp yes :padline no
  <!DOCTYPE html5>
  <html lang="en">
    <head>
      <title><<lein-coords>> test</title>
    </head>
    <body>
      <script type="text/javascript" src="<<cljs-artefact-path>>"></script>
    </body>
  </html>
#+END_SRC
** Accessing library version during runtime

The autogenerated namespace =thi.ng.trio.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use '[thi.ng.trio.version])
  
  (prn version)
  ; "<<version>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/trio/version.cljx :noweb yes :mkdirp yes :padline no :exports none
  (ns thi.ng.trio.version)

  (def ^:const version "<<version>>")
#+END_SRC

* Modules

*** Note for Github users

The following sections contain links to project modules, but are not
visibile when reading this file on Github. Please navigate to the
source files via the normal [[https://github.com/thi.ng/trio/tree/master/][GH repo browser]].

** Core API

#+INCLUDE: "core.org" :minlevel 2

* Tests

#+INCLUDE: "../test/core.org" :minlevel 2
