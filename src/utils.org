#+SETUPFILE: setup.org

* Contents                                                         :toc_3_gh:
 - [[#namespace-thingtrioutils][Namespace: thi.ng.trio.utils]]
     - [[#case-conversion][Case conversion]]
     - [[#uuid-generation][UUID generation]]
     - [[#complete-namespace-definition][Complete namespace definition]]

* Namespace: thi.ng.trio.utils

** Case conversion

#+BEGIN_SRC clojure :noweb-ref case-convert
  (defn ->kebab-case
    [x] (-> x (str/replace #"([a-z\d])([A-Z])" "$1-$2") str/lower-case))
#+END_SRC

** UUID generation

#+BEGIN_SRC clojure :noweb-ref uuid
  (def ^:private format-16bit-hex (f/pad-left 4 "0"))

  (defn rand-bits
    [bits] (int (* (rand) (bit-shift-left 1 bits))))

  (defn rand-bits-hex
    [bits] ((f/pad-left (Math/ceil (/ bits 4)) "0") (.toString (rand-bits bits) 16)))

  (defn rand-16bits-hex
    [] (format-16bit-hex (.toString (rand-int 0x10000) 16)))

  (defn new-uuid
    []
    #?(:clj
       (str (java.util.UUID/randomUUID))
       :cljs (str
              (rand-16bits-hex) (rand-16bits-hex)
              "-" (rand-16bits-hex)
              "-" (-> (rand-bits 16) (bit-and 0x0fff) (bit-or 0x4000) (.toString 16) (format-16bit-hex))
              "-" (-> (rand-bits 16) (bit-and 0x3fff) (bit-or 0x8000) (.toString 16) (format-16bit-hex))
              "-" (rand-16bits-hex) (rand-16bits-hex) (rand-16bits-hex))))
#+END_SRC

** Complete namespace definition

#+BEGIN_SRC clojure :tangle ../babel/src/thi/ng/trio/utils.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.trio.utils
    (:require
     [thi.ng.common.stringformat :as f]
     [clojure.string :as str]))

  <<case-convert>>

  <<uuid>>
#+END_SRC
