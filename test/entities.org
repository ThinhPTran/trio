#+SETUPFILE: "../src/setup.org"

* thi.ng.trio.test.entities

** Entities

#+BEGIN_SRC clojure :noweb-ref tests
  (defentity TestEntity "trio:TestEntity"
    {:title    {:prop "dcterms:title"
                :validate [(v/string)]
                :default (fn [_] "Untitled")}
     :creator  {:prop "dcterms:creator"
                :validate [(v/uuid4)]
                :init (eu/pick-id :creator)}
     :created  {:prop "dcterms:created"
                :validate [(v/number) (v/pos)]
                :default (fn [_] 1000)}
     :modified {:prop "dcterms:modified"
                :validate [(v/number) (v/pos)]
                :default (fn [_] [1001])
                :card :*
                :order :asc}
     :items    {:prop "dcterms:hasPart"
                :validate {:* [(v/uuid4)]}
                :optional true
                :card :*}})
#+END_SRC

#+BEGIN_SRC clojure :noweb-ref tests
  (deftest test-entity
    (is (thrown? #+clj IllegalArgumentException #+cljs js/Error (make-test-entity {})))
    (let [cid (utils/new-uuid)
          e  (make-test-entity {:creator cid})]
      (is (= {:creator cid :title "Untitled" :type "trio:TestEntity"
              :created 1000 :modified [1001] :items []}
             (dissoc e :id)))))
#+END_SRC

** Namespace declaration

#+BEGIN_SRC clojure :tangle ../babel/test/cljx/thi/ng/trio/test/entities.cljx :noweb yes :mkdirp yes :padline no
  (ns thi.ng.trio.test.entities
    ,#+cljs
    (:require-macros
     [cemerick.cljs.test :refer [is deftest with-test testing]]
     [thi.ng.trio.entities :as e :refer [defentity]])
    (:require
     [thi.ng.validate.core :as v]
     [thi.ng.trio.core :as api]
     [thi.ng.trio.query :as q]
     [thi.ng.trio.utils :as utils]
     [thi.ng.trio.entities.utils :as eu]
     ,#+clj  [thi.ng.trio.entities :refer [defentity]]
     ,#+clj  [clojure.test :refer :all]
     ,#+cljs [cemerick.cljs.test :as t]))

  <<tests>>
#+END_SRC
