#+SETUPFILE: "../src/setup.org"

* thi.ng.trio.test.core

** Triplestore tests

#+BEGIN_SRC clojure :noweb-ref tests
  (def g1
    '[[[alice bob carl] friend ed]
      [alice mother [fred gemma]]
      [bob father fred]
      [gemma mother henry]
      [fred father [inigo james]]])

  (defrecord Foo [x y]
    api/PTripleSeq
    (triple-seq [_] (api/triple-seq {x {:p y} y {:q x}})))

  (defn select-set
    [ds & [s p o]] (set (api/select ds s p o)))

  (defn select-with-alts-set
    [ds & [s p o]] (set (api/select-with-alts ds s p o)))

  (deftest record-conversions
    (let [foo (Foo. 23 42)
          bar (Foo. 42 23)]
      (is (= [[23 :p 42] [42 :q 23]] (api/triple-seq foo)))
      (is (= [[23 :p 42] [42 :q 23]] (api/triple-seq [foo])))
      (is (= [[foo :p2 bar]] (api/triple-seq {foo {:p2 bar}})))
      (is (= [[23 :p 42] [42 :q 23] [23 :p2 bar] [42 :p2 bar]]
             (api/triple-seq [foo [[23 42] :p2 bar]])))))

  (deftest conversions
    (let [t1 '[[s1 p o]                   ;; 1
               [[s1 s2] p o]              ;; 2
               [s3 [p1 p2] o]             ;; 2
               [s4 p [o1 o2]]             ;; 2
               [[s5 s6] [p1 p2] [o1 o2]]  ;; 8
               [[s7 s8] [p1 p2] o]        ;; 4
               [[s9 s0] p1 [o1 o2]]       ;; 4
               [s0 [p2 p3] [o1 o2]]]      ;; 4
          t2 '{s1 {p1 o1 p2 o2}           ;; 2
               s2 {p1 [o1 o1 o2] p3 o3}}] ;; 4
      (is (satisfies? api/PTripleSeq []))
      #?(:clj (is (satisfies? api/PTripleSeq (list))))
      #?(:clj (is (satisfies? api/PTripleSeq (cons '[s p o] nil))))
      (is (satisfies? api/PTripleSeq (lazy-seq [])))
      (is (satisfies? api/PTripleSeq {}))
      (is (satisfies? api/PModelConvert []))
      #?(:clj (is (satisfies? api/PModelConvert (list))))
      #?(:clj (is (satisfies? api/PModelConvert (cons '[s p o] nil))))
      (is (satisfies? api/PModelConvert (lazy-seq [])))
      (is (satisfies? api/PModelConvert {}))
      (is (== 27 (count (api/triple-seq t1))))
      (is (== 6  (count (api/triple-seq t2))))
      (is (== 26 (api/model-size (api/as-model t1))))
      (is (== 5  (api/model-size (api/as-model t2))))))

  (defn test-store-api
    [name ds]
    (testing
        (str "testing store: " name)
      (is (== 9 (api/model-size ds) (count (select-set ds))))
      (is (= (set (api/triple-seq-sequential g1)) (set (select-set ds))))
      (is (= '#{alice bob carl gemma fred} (set (api/subjects ds))))
      (is (= '#{friend mother father} (set (api/predicates ds))))
      (is (= '#{ed fred gemma henry inigo james} (set (api/objects ds))))
      ;; s ? ?
      (is (= '#{[bob friend ed] [bob father fred]}
             (select-set ds 'bob nil nil)))
      ;; ? p ?
      (is (= '#{[alice mother fred] [alice mother gemma] [gemma mother henry]}
             (select-set ds nil 'mother nil)))
      ;; ? ? o
      (is (= '#{[alice friend ed] [bob friend ed] [carl friend ed]}
             (select-set ds nil nil 'ed)))
      ;; s p ?
      (is (= '#{[alice mother fred] [alice mother gemma]}
             (select-set ds 'alice 'mother nil)))
      ;; s ? o
      (is (= '#{[fred father inigo]}
             (select-set ds 'fred nil 'inigo)))
      ;; ? p o
      (is (= '#{[gemma mother henry]}
             (select-set ds nil 'mother 'henry)))
      ;; s p o
      (is (= '#{[gemma mother henry]}
             (select-set ds 'gemma 'mother 'henry)))
      ;; n/a
      (is (= #{} (select-set ds 'henry 'friend 'bob)))))

  (defn test-select-with-alts
    [name ds]
    (testing
        (str "testing alt select: " name)
      ;; select-with-alts
      ;; s ? ?
      (is (= '#{[bob friend ed] [bob father fred]}
             (select-with-alts-set ds 'bob nil nil)))
      (is (= '#{[bob friend ed] [bob father fred] [fred father inigo] [fred father james]}
             (select-with-alts-set ds '#{bob fred} nil nil)))
      ;; ? p ?
      (is (= '#{[alice mother fred] [alice mother gemma] [gemma mother henry]}
             (select-with-alts-set ds nil 'mother nil)))
      (is (= '#{[alice mother fred] [alice mother gemma] [gemma mother henry]
                [bob father fred] [fred father inigo] [fred father james]}
             (select-with-alts-set ds nil '#{mother father} nil)))
      ;; ? ? o
      (is (= '#{[alice mother fred] [bob father fred]}
             (select-with-alts-set ds nil nil 'fred)))
      (is (= '#{[alice mother fred] [bob father fred] [fred father inigo]}
             (select-with-alts-set ds nil nil '#{fred inigo})))
      ;; s p ?
      (is (= '#{[alice mother fred] [alice mother gemma]}
             (select-with-alts-set ds 'alice 'mother nil)))
      (is (= '#{[alice mother fred] [alice mother gemma] [bob father fred]}
             (select-with-alts-set ds '#{alice bob} '#{mother father} nil)))
      ;; s ? o
      (is (= '#{[fred father inigo]}
             (select-with-alts-set ds 'fred nil 'inigo)))
      (is (= '#{[fred father inigo] [gemma mother henry]}
             (select-with-alts-set ds '#{fred gemma} nil '#{inigo henry})))
      ;; ? p o
      (is (= '#{[gemma mother henry]}
             (select-with-alts-set ds nil 'mother 'henry)))
      (is (= '#{[gemma mother henry] [alice mother fred] [alice mother gemma]}
             (select-with-alts-set ds nil '#{mother friend} '#{henry gemma fred})))
      ;; s p o
      (is (= '#{[gemma mother henry]}
             (select-with-alts-set ds 'gemma 'mother 'henry)))
      (is (= '#{[bob friend ed] [gemma mother henry]}
             (select-with-alts-set ds '#{bob gemma} '#{friend mother} '#{ed henry})))))

  (deftest plainstore-api
    (let [ds (api/as-model g1)]
      (test-store-api "plain-store" ds)
      (test-select-with-alts "plain-store" ds)))

  (deftest aliasstore-api
    (let [ds  (api/alias-store (api/as-model g1) nil)
          ds2 (api/alias-store (api/as-model g1) '{alice a, gemma g, mother parent})
          ac  (u/canonical ds2 'alice)
          mc  (u/canonical ds2 'mother)
          gc  (u/canonical ds2 'gemma)]
      (test-store-api "alias-store1" ds)
      (is (every? #(contains? (set (api/subjects ds2)) %) [ac gc]))
      (is (contains? (set (api/predicates ds2)) mc))
      (is (contains? (set (api/objects ds2)) gc))
      (is (api/subject? ds2 'alice))
      (is (api/predicate? ds2 'mother))
      (is (api/object? ds2 'gemma))
      (is (= #{[ac 'friend 'ed] [ac mc 'fred] [ac mc gc]}
             (select-set ds2 'alice nil nil)))))
#+END_SRC

** Namespace declaration

#+BEGIN_SRC clojure :tangle ../babel/test/thi/ng/trio/test/core.cljc :noweb yes :mkdirp yes :padline no
  (ns thi.ng.trio.test.core
    #?(:cljs
       (:require-macros
        [cemerick.cljs.test :refer [is deftest with-test testing]]))
    (:require
     [thi.ng.trio.core :as api]
     [thi.ng.trio.query :as q]
     [thi.ng.dstruct.unionfind :as u]
     #?(:clj
        [clojure.test :refer :all]
        :cljs
        [cemerick.cljs.test :as t])))

  <<tests>>
#+END_SRC
